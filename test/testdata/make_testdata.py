#!/usr/bin/env python3

from string import Template
import subprocess
import base64
from scipy import misc
import numpy as np


header_template = """/// DO NOT EDIT.  This file is auto-generated by make_testdata.py
#pragma once

#include <vector>
#include <string>
#include <array>

#include "libvideoio/ImageSize.h"

typedef unsigned char BYTE;

const int NUM_TEST_IMAGES=$num_test_images;
extern const std::array<std::string, NUM_TEST_IMAGES> TestImages;

const int SNIPPET_SIZE=$snippet_size;
typedef std::array< BYTE, SNIPPET_SIZE > ImageSnippetRow;
typedef std::array< ImageSnippetRow, SNIPPET_SIZE > ImageSnippet;

extern const std::array< ImageSnippet, NUM_TEST_IMAGES > ImageSnippets;

const size_t TestImageWidth = $img_width;
const size_t TestImageHeight = $img_height;
const libvideoio::ImageSize TestImageSize( TestImageWidth, TestImageHeight );

std::vector<BYTE> TestImage( int i );
"""

## Don't include the full image data via the template, so we don't need to keep
## it all in memory...
cpp_top_template = """/// DO NOT EDIT.  This file is auto-generated by make_testdata.py
#include "testimages.h"

const std::array<std::string, NUM_TEST_IMAGES> TestImages = {
"""

cpp_mid_template = """ };

const std::array< ImageSnippet, NUM_TEST_IMAGES > ImageSnippets{ $snippets };

"""


## Input images to process
images = [ "00001.png", "00002.png", "00003.png" ]

## Extract a small subset of N x N subset of each image
snippet_size = 4;



subsets = []

## TODO: Inefficiently, open image twice...
img = misc.imread(images[0])
with open("testimages.h", 'w') as f:
    f.write( Template( header_template).substitute( num_test_images=len(images), snippet_size=snippet_size,
                                                    img_width=img.shape[1], img_height=img.shape[0] ))

with open("testimages_data.cpp", 'w') as f:
    f.write( Template( cpp_top_template ).substitute() )

    for i in images:
        ## TODO.  Check all test image have same size
        img = misc.imread(i)
        f.write( "\"%s\"" % base64.b64encode(img).decode('ascii') )
        subsets.append( img[0:snippet_size, 0:snippet_size] )

        if i != images[-1]:
            f.write(",\n")


    def fmt_snippet( s ):
        rows = ["ImageSnippetRow{%s}" % (','.join(["%d" % elem for elem in row])) for row in s]
        return "ImageSnippet{ std::array< ImageSnippetRow, %d>{%s} }" % (snippet_size,','.join(rows))


    snippets = ',\n'.join([fmt_snippet(s) for s in subsets])

    f.write( Template( cpp_mid_template ).substitute(snippets=snippets) )
